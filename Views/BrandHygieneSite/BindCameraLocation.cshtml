@model  SECU_CAMSPlus_DEV.Models.BrandHygieneSite
@{
    ViewBag.Title = "Add Camera Location :: CAMSPlus";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@*<h2>BindCameraLocation</h2>*@


@if (TempData["CameraLocationError"] != null)
{
    <script>
        $(document).ready(function () {
            var msg = "@TempData["CameraLocationError"]";
            alert(msg);
        });
    </script>
}


<div class="col-lg-12 animated fadeIn margin-top">
    <div class="panel panel-yellow">
        <div class="panel-heading">
            <div class="row">
                <div class="col-md-12">
                    <h2>View Camera Configuration</h2>
                </div>
            </div>
        </div>
        @using (Html.BeginForm("BindCameraConfiguration", "BrandHygieneSite", FormMethod.Post))
        {
            @Html.AntiForgeryToken()
            var grid = new WebGrid(Model, canSort: true, ajaxUpdateContainerId: "grid", rowsPerPage: 10);
            grid.Pager(WebGridPagerModes.All);
                      
            <div class="row">
                <div class="col-lg-12">
                    <div class="note note-info">
                        <div class="row">
                            <div class="col-md-10">
                                <h3 class="box-heading">@Html.Label("lblSiteID", "SiteID :" + Convert.ToString(Session["BrandHygieneSiteSiteID"]), new { @class = "ProjectLabel" })</h3>
                            </div>
                        </div>
                        <div class="clearfix"></div>
                    </div>
                </div>
            </div>
            <div class="panel-body">
                <div class="row">
                    <div class="col-xs-12 col-sm-3 col-md-3">
                        <div class="form-group">
                            @Html.LabelFor(model => model.CameraLocation, htmlAttributes: new { @class = "control-label" })
                            @Html.DropDownListFor(m => m.CameraLocation, new SelectList(Model.CameraLocationList as System.Collections.IEnumerable, "Value", "Text"), "---select---", new { @class = "form-control required", @onfocus = "this.size=10;", @onblur = "this.size=1;", @onchange = "this.size=1; this.blur();", @id = "ddlCameraLocation" })
                            @Html.ValidationMessageFor(m => m.CameraLocation, null, new { @class = "valiation", @id = "validationCameraLocation" })
                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-3 col-md-3">
                        <div class="form-group">
                            @Html.LabelFor(model => model.CameraNo, htmlAttributes: new { @class = "control-label" })
                            @*@Html.CheckBoxFor(m => m.CameraNoList, new { @class = "form-control required", @id = "txtSiteID", @onkeypress = "return charandnumbers('errorSiteID')" })*@

                            @foreach (var item in Model.CameraNoList)
                            {
                                <div class="checkbox">
                                    <label>
                                        <input type="checkbox"
                               name="selectedCamera"
                               value="@item.Value" />
                                        @item.Text
                                    </label>
                                </div>
                            }

                            @Html.ValidationMessageFor(m => m.CameraNo, null, new { @class = "valiation", @id = "errorCameraNo" })
                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-3 col-md-3">
                        <div class="form-group">
                            @Html.LabelFor(model => model.StateID, htmlAttributes: new { @class = "control-label" })
                            @Html.DropDownListFor(m => m.StateID, new SelectList(Model.StateList as System.Collections.IEnumerable, "Value", "Text"), "---select---", new { @class = "form-control required", @id = "ddlstate" })
                            @Html.ValidationMessageFor(m => m.StateID, null, new { @class = "valiation", @id = "validationState" })
                            @Html.HiddenFor(m => m.StateName)
                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-3 col-md-3">
                        <div class="form-group">
                            @Html.LabelFor(model => model.CityID, htmlAttributes: new { @class = "control-label" })
                            @Html.DropDownListFor(m => m.CityID, new SelectList(Model.CityList as System.Collections.IEnumerable, "Value", "Text"), "---select---", new { @class = "form-control required", @id = "ddlcity" })
                            @Html.ValidationMessageFor(m => m.CityID, null, new { @class = "valiation", @id = "validationCity" })
                            @Html.HiddenFor(m => m.CityName)
                        </div>
                    </div>
                </div>




                <div class="table-responsive">
                    @if (Model != null)
                    {
                        <div class="col-md-12">
                        <div class="pull-right">Total number of records found :  @Model.Count()</div>
                    </div>
                        if (Model.Count() > 0)
                        {
                        @grid.GetHtml(tableStyle: "table table-hover table-striped", footerStyle: "tfoot dataTables_paginate", columns:
                grid.Columns
                (
               grid.Column("Location", "Location"),
                        grid.Column("CameraNo", "Camera Number"),
                        grid.Column("Description", "Description"),
                        grid.Column("CheckList", "CheckList"),

            grid.Column(header: "", canSort: false, style: "action",
                format: @<text>
                        @Html.Raw("<a data-modal='' data-toggle='tooltip' data-placement='right' data-original-title='Edit' class='glyphicon glyphicon-edit btn btn-success btn-xs' href='Edit/" + item.CameraLocationID + "' id='" + item.CameraLocationID + "''> </a>")
                        </text>)
                            ,

 grid.Column(header: "", canSort: false, format: (item) => Html.ActionLink(" ", "Delete", new { id = item.CameraLocationID },
    new { onclick = "return confirm('Do you want to delete this camera location?'); ", @Name = "Delete", @class = "glyphicon glyphicon-trash btn btn-danger btn-xs", @title = "Delete", data_toggle = "tooltip", data_placement = "right" }))

     ), mode: WebGridPagerModes.Numeric)
                        }
                        else
                        {
                        <div>No records found</div>
                        }
                    }
                    <script type="text/javascript">
                        function updateGrid() {
        @Html.Raw(HttpUtility.HtmlDecode(grid.GetContainerUpdateScript("/?page=" + (grid.PageIndex + 1)).ToString()))
                        }
                    </script>
                </div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    <div class="alert alert-danger" id="divInvalidMsg" role="alert" style="display: none" align="Left">
                        @if (TempData["CameraLocationInvalidMsg"] != null)
                        {     
                            @TempData["CameraLocationInvalidMsg"]
                        }
                    </div>
                    <div class="alert alert-success" role="alert" id="divSuccessMsg" style="display: none" align="Left">
                        @if (TempData["CameraLocationNotice"] != null)
                        {      
                            @TempData["CameraLocationNotice"]
                        }
                    </div>
                    <span id="progress" class="text-center" style="display: none;">
                        <img src="/images/ajax-loader.gif" alt="wiat" />
                        Wait..
                    </span>

                </div>
            </div>
        }
        <div class="panel-footer text-center">
            <input class="btn btn-success btn-sm" type="button" value="Update" name="Command" id="btnUpdate" />
            <input class="btn btn-danger btn-sm" type="button" value="Delete" name="Command" id="btnDelete" />
            <input type="button"  class="btn btn-warning btn-sm"  value="Cancel" onclick="@("window.location.href='" + @Url.Action("Edit", "BrandHygieneSite", new { SiteID = Session["BrandHygieneSiteSiteID"], ClientID = Session["BrandHygieneSiteClientID"] }) + "'")    ;" />

        </div>
    </div>

</div>
<div class="clearfix"></div>
